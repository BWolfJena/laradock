version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  percona:
    driver: ${VOLUMES_DRIVER}
  mssql:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  neo4j:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
  rethinkdb:
    driver: ${VOLUMES_DRIVER}
  phpmyadmin:
    driver: ${VOLUMES_DRIVER}
  adminer:
    driver: ${VOLUMES_DRIVER}
  aerospike:
    driver: ${VOLUMES_DRIVER}
  caddy:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  mosquitto:
    driver: ${VOLUMES_DRIVER}
  confluence:
    driver: ${VOLUMES_DRIVER}
  sonarqube:
    driver: ${VOLUMES_DRIVER}
  cassandra:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
    workspace:
      build:
        context: ./workspace
        args:
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
          - INSTALL_SUBVERSION=${WORKSPACE_INSTALL_SUBVERSION}
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
          - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SSH2=${WORKSPACE_INSTALL_SSH2}
          - INSTALL_GMP=${WORKSPACE_INSTALL_GMP}
          - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
          - INSTALL_XSL=${WORKSPACE_INSTALL_XSL}
          - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
          - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
          - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
          - INSTALL_AMQP=${WORKSPACE_INSTALL_AMQP}
          - INSTALL_CASSANDRA=${WORKSPACE_INSTALL_CASSANDRA}
          - INSTALL_GEARMAN=${WORKSPACE_INSTALL_GEARMAN}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NPM_REGISTRY=${WORKSPACE_NPM_REGISTRY}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_NPM_GULP=${WORKSPACE_INSTALL_NPM_GULP}
          - INSTALL_NPM_BOWER=${WORKSPACE_INSTALL_NPM_BOWER}
          - INSTALL_NPM_VUE_CLI=${WORKSPACE_INSTALL_NPM_VUE_CLI}
          - INSTALL_NPM_ANGULAR_CLI=${WORKSPACE_INSTALL_NPM_ANGULAR_CLI}
          - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
          - INSTALL_WP_CLI=${WORKSPACE_INSTALL_WP_CLI}
          - INSTALL_DRUPAL_CONSOLE=${WORKSPACE_INSTALL_DRUPAL_CONSOLE}
          - INSTALL_AEROSPIKE=${WORKSPACE_INSTALL_AEROSPIKE}
          - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - COMPOSER_AUTH=${WORKSPACE_COMPOSER_AUTH}
          - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
          - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
          - INSTALL_PRESTISSIMO=${WORKSPACE_INSTALL_PRESTISSIMO}
          - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
          - INSTALL_MC=${WORKSPACE_INSTALL_MC}
          - INSTALL_SYMFONY=${WORKSPACE_INSTALL_SYMFONY}
          - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
          - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - INSTALL_TERRAFORM=${WORKSPACE_INSTALL_TERRAFORM}
          - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
          - INSTALL_PG_CLIENT=${WORKSPACE_INSTALL_PG_CLIENT}
          - INSTALL_PHALCON=${WORKSPACE_INSTALL_PHALCON}
          - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
          - INSTALL_TAINT=${WORKSPACE_INSTALL_TAINT}
          - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
          - INSTALL_IONCUBE=${WORKSPACE_INSTALL_IONCUBE}
          - INSTALL_MYSQL_CLIENT=${WORKSPACE_INSTALL_MYSQL_CLIENT}
          - INSTALL_PING=${WORKSPACE_INSTALL_PING}
          - INSTALL_SSHPASS=${WORKSPACE_INSTALL_SSHPASS}
          - INSTALL_MAILPARSE=${WORKSPACE_INSTALL_MAILPARSE}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - DRUSH_VERSION=${WORKSPACE_DRUSH_VERSION}
          - TZ=${WORKSPACE_TIMEZONE}
          - BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
          - BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
          - INSTALL_POWERLINE=${WORKSPACE_INSTALL_POWERLINE}
          - INSTALL_FFMPEG=${WORKSPACE_INSTALL_FFMPEG}
          - INSTALL_GNU_PARALLEL=${WORKSPACE_INSTALL_GNU_PARALLEL}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_HOST=tcp://docker-in-docker:2375
      networks:
        - frontend
        - backend
      links:
        - docker-in-docker

### PHP-FPM ##############################################
    php-fpm:
      build:
        context: ./php-fpm
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
          - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_PHPDBG=${PHP_FPM_INSTALL_PHPDBG}
          - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SSH2=${PHP_FPM_INSTALL_SSH2}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_XSL=${PHP_FPM_INSTALL_XSL}
          - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
          - INSTALL_CASSANDRA=${PHP_FPM_INSTALL_CASSANDRA}
          - INSTALL_GEARMAN=${PHP_FPM_INSTALL_GEARMAN}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_AEROSPIKE=${PHP_FPM_INSTALL_AEROSPIKE}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_POSTGIS=${PHP_FPM_INSTALL_POSTGIS}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
          - INSTALL_PHALCON=${PHP_FPM_INSTALL_PHALCON}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_TAINT=${PHP_FPM_INSTALL_TAINT}
          - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
          - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
          - INSTALL_IONCUBE=${PHP_FPM_INSTALL_IONCUBE}
          - INSTALL_APCU=${PHP_FPM_INSTALL_APCU}
          - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
          - INSTALL_RDKAFKA=${PHP_FPM_INSTALL_RDKAFKA}
          - INSTALL_ADDITIONAL_LOCALES=${PHP_FPM_INSTALL_ADDITIONAL_LOCALES}
          - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
          - INSTALL_PING=${PHP_FPM_INSTALL_PING}
          - INSTALL_SSHPASS=${PHP_FPM_INSTALL_SSHPASS}
          - INSTALL_MAILPARSE=${PHP_FPM_INSTALL_MAILPARSE}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
          - ADDITIONAL_LOCALES=${PHP_FPM_ADDITIONAL_LOCALES}
          - INSTALL_FFMPEG=${PHP_FPM_FFMPEG}
          - INSTALL_XHPROF=${PHP_FPM_INSTALL_XHPROF}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - DOCKER_HOST=tcp://docker-in-docker:2375
        - FAKETIME=${PHP_FPM_FAKETIME}
      depends_on:
        - workspace
      networks:
        - backend
      links:
        - docker-in-docker

### PHP Worker ############################################
    php-worker:
      build:
        context: ./php-worker
        args:
          - PHP_VERSION=${PHP_VERSION}
          - PHALCON_VERSION=${PHALCON_VERSION}
          - INSTALL_PGSQL=${PHP_WORKER_INSTALL_PGSQL}
          - INSTALL_BCMATH=${PHP_WORKER_INSTALL_BCMATH}
          - INSTALL_PHALCON=${PHP_WORKER_INSTALL_PHALCON}
          - INSTALL_SOAP=${PHP_WORKER_INSTALL_SOAP}
          - INSTALL_ZIP_ARCHIVE=${PHP_WORKER_INSTALL_ZIP_ARCHIVE}
          - INSTALL_MYSQL_CLIENT=${PHP_WORKER_INSTALL_MYSQL_CLIENT}
          - INSTALL_AMQP=${PHP_WORKER_INSTALL_AMQP}
          - INSTALL_CASSANDRA=${PHP_WORKER_INSTALL_CASSANDRA}
          - INSTALL_GEARMAN=${PHP_WORKER_INSTALL_GEARMAN}
          - INSTALL_GHOSTSCRIPT=${PHP_WORKER_INSTALL_GHOSTSCRIPT}
          - INSTALL_SWOOLE=${PHP_WORKER_INSTALL_SWOOLE}
          - INSTALL_TAINT=${PHP_WORKER_INSTALL_TAINT}
          - INSTALL_FFMPEG=${PHP_WORKER_INSTALL_FFMPEG}
          - INSTALL_GMP=${PHP_WORKER_INSTALL_GMP}
          - INSTALL_REDIS=${PHP_WORKER_INSTALL_REDIS}
          - PUID=${PHP_WORKER_PUID}
          - PGID=${PHP_WORKER_PGID}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ./php-worker/supervisord.d:/etc/supervisord.d
      depends_on:
        - workspace
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - backend
### Laravel Horizon ############################################
    laravel-horizon:
      build:
        context: ./laravel-horizon
        args:
          - PHP_VERSION=${PHP_VERSION}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_SOCKETS=${LARAVEL_HORIZON_INSTALL_SOCKETS}
          - INSTALL_CASSANDRA=${PHP_FPM_INSTALL_CASSANDRA}
          - INSTALL_PHPREDIS=${LARAVEL_HORIZON_INSTALL_PHPREDIS}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./laravel-horizon/supervisord.d:/etc/supervisord.d
      depends_on:
        - workspace
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - backend

### NGINX Server #########################################
    nginx:
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### Blackfire Container #################################

    # blackfire:
    #   image: blackfire/blackfire
    #   environment:
    #     - BLACKFIRE_SERVER_ID=${BLACKFIRE_SERVER_ID}
    #     - BLACKFIRE_SERVER_TOKEN=${BLACKFIRE_SERVER_TOKEN}
    #   depends_on:
    #     - php-fpm
    #   networks:
    #     - backend


### MySQL Container #########################################

    mysql:
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### MariaDB Container #######################################

    # mariadb:
    #   build: ./mariadb
    #   volumes:
    #     - ${DATA_SAVE_PATH}/mariadb:/var/lib/mysql
    #     - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    #   ports:
    #     - "${MARIADB_PORT}:3306"
    #   environment:
    #     - MYSQL_DATABASE=${MARIADB_DATABASE}
    #     - MYSQL_USER=${MARIADB_USER}
    #     - MYSQL_PASSWORD=${MARIADB_PASSWORD}
    #     - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    #   networks:
    #     - backend

### PostgreSQL Container ####################################

    # postgres:
    #   build: ./postgres
    #   volumes:
    #     - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
    #   ports:
    #     - "${POSTGRES_PORT}:5432"
    #   environment:
    #     - POSTGRES_DB=${POSTGRES_DB}
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #   networks:
    #     - backend

### Redis Container #########################################

    # redis:
    #   build: ./redis
    #   volumes:
    #     - ${DATA_SAVE_PATH}/redis:/data
    #   ports:
    #     - "${REDIS_PORT}:6379"
    #   networks:
    #     - backend

### Beanstalkd Container ####################################

    # beanstalkd:
    #   build: ./beanstalkd
    #   ports:
    #     - "${BEANSTALKD_HOST_PORT}:11300"
    #   privileged: true
    #   depends_on:
    #     - php-fpm
    #   networks:
    #     - backend


### Cassandra ############################################
    cassandra:
      build: ./cassandra
      ports:
        - "${CASSANDRA_TRANSPORT_PORT_NUMBER}:7000"
        - "${CASSANDRA_JMX_PORT_NUMBER}:7199"
        - "${CASSANDRA_CQL_PORT_NUMBER}:9042"
      privileged: true
      environment:
        - CASSANDRA_VERSION=${CASSANDRA_VERSION}
        - CASSANDRA_TRANSPORT_PORT_NUMBER=${CASSANDRA_TRANSPORT_PORT_NUMBER}
        - CASSANDRA_JMX_PORT_NUMBER=${CASSANDRA_JMX_PORT_NUMBER}
        - CASSANDRA_CQL_PORT_NUMBER=${CASSANDRA_CQL_PORT_NUMBER}
        - CASSANDRA_USER=${CASSANDRA_USER}
        - CASSANDRA_PASSWORD_SEEDER=${CASSANDRA_PASSWORD_SEEDER}
        - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
        - CASSANDRA_NUM_TOKENS=${CASSANDRA_NUM_TOKENS}
        - CASSANDRA_HOST=${CASSANDRA_HOST}
        - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
        - CASSANDRA_SEEDS=${CASSANDRA_SEEDS}
        - CASSANDRA_ENDPOINT_SNITCH=${CASSANDRA_ENDPOINT_SNITCH}
        - CASSANDRA_ENABLE_RPC=${CASSANDRA_ENABLE_RPC}
        - CASSANDRA_DATACENTER=${CASSANDRA_DATACENTER}
        - CASSANDRA_RACK=${CASSANDRA_RACK}
      hostname: laradock-cassandra
      volumes:
        - ${DATA_PATH_HOST}/cassandra:/var/lib/cassandra
      depends_on:
        - php-fpm
      networks:
        - backend

    # beanstalkd-console:
    #   build: ./beanstalkd-console
    #   ports:
    #     - "2080:2080"
    #   depends_on:
    #     - beanstalkd
    #   networks:
    #     - backend

### Caddy Server Container ##################################

    # caddy:
    #   build: ./caddy
    #   volumes_from:
    #     - applications
    #   volumes:
    #     - ${CADDY_CUSTOM_CADDYFILE}:/etc/Caddyfile
    #     - ${CADDY_HOST_LOG_PATH}:/var/log/caddy
    #     - ${DATA_SAVE_PATH}:/root/.caddy
    #   ports:
    #     - "${CADDY_HOST_HTTP_PORT}:80"
    #     - "${CADDY_HOST_HTTPS_PORT}:443"
    #   depends_on:
    #     - php-fpm
    #   networks:
    #     - frontend
    #     - backend

## phpMyAdmin Container ####################################

    phpmyadmin:
      build: ./phpmyadmin
      environment:
        - PMA_ARBITRARY=1
        - MYSQL_USER=bwolf
        - MYSQL_PASSWORD=secret
        - MYSQL_ROOT_PASSWORD=secret
      ports:
        - "8000:80"
      depends_on:
        - mysql
      networks:
        - frontend
        - backend

### pgAdmin Container #######################################

    # pgadmin:
    #   build: ./pgadmin
    #   ports:
    #     - "5050:5050"
    #   volumes:
    #     - ${DATA_SAVE_PATH}/pgadmin-backup:/var/lib/pgadmin4/data/storage/pgadmin4
    #   depends_on:
    #     - postgres
    #   networks:
    #     - frontend
    #     - backend

### Certbot Container ##################################

    # certbot:
    #   build:
    #     context: ./certbot
    #   volumes:
    #     - ./data/certbot/certs/:/var/certs
    #     - ./certbot/letsencrypt/:/var/www/letsencrypt
    #   environment:
    #     - CN="fake.domain.com"
    #     - EMAIL="fake.email@gmail.com"
    #   networks:
    #     - frontend

### Mailhog Container #########################################

    # mailhog:
    #   build: ./mailhog
    #   ports:
    #     - "1025:1025"
    #     - "8025:8025"
    #   networks:
    #     - frontend
    #     - backend

### MailDev ##############################################
    maildev:
      build: ./maildev
      ports:
        - "${MAILDEV_HTTP_PORT}:80"
        - "${MAILDEV_SMTP_PORT}:25"
      networks:
        - frontend
        - backend

    algorithm:
      build: ../src/algorithm
      volumes:
          - ../src/algorithm/src:/usr/src/app/src/
      ports:
        - "1337:80"
      networks:
        - backend

### Selenium Container ########################################

    # selenium:
    #   build: ./selenium
    #   ports:
    #     - "${SELENIUM_PORT}:4444"
    #   volumes:
    #     - /dev/shm:/dev/shm
    #   networks:
    #     - frontend

### Graylog #######################################
    graylog:
        build: ./graylog
        environment:
          - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD}
          - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_SHA256_PASSWORD}
          - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:${GRAYLOG_PORT}/
        links:
          - mongo
          - elasticsearch
        depends_on:
          - mongo
          - elasticsearch
        ports:
          # Graylog web interface and REST API
          - ${GRAYLOG_PORT}:9000
          # Syslog TCP
          - ${GRAYLOG_SYSLOG_TCP_PORT}:514
          # Syslog UDP
          - ${GRAYLOG_SYSLOG_UDP_PORT}:514/udp
          # GELF TCP
          - ${GRAYLOG_GELF_TCP_PORT}:12201
          # GELF UDP
          - ${GRAYLOG_GELF_UDP_PORT}:12201/udp
        user: root
        volumes:
          - ./graylog/config:/usr/share/graylog/data/config
        networks:
          - backend

### Laravel Echo Server #######################################
    # laravel-echo-server:
    #   build:
    #     context: ./laravel-echo-server
    #   volumes:
    #     - ./laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
    #   ports:
    #     - "${LARAVEL_ECHO_SERVER_PORT}:6001"
    #   links:
    #     - redis
    #   networks:
    #     - frontend
    #     - backend

### Portainer ################################################
    portainer:
      build:
        context: ./portainer
      volumes:
        - ${DATA_PATH_HOST}/portainer_data:/data
        - /var/run/docker.sock:/var/run/docker.sock
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - 9010:9000
      networks:
        - backend

### Gitlab ################################################
    gitlab:
      build:
        context: ./gitlab
      environment:
        GITLAB_OMNIBUS_CONFIG: |
          external_url '${GITLAB_DOMAIN_NAME}'
          redis['enable'] = false
          nginx['listen_https'] = false
          nginx['listen_port'] = 80
          nginx['custom_gitlab_server_config'] = "set_real_ip_from 172.0.0.0/8;\nreal_ip_header X-Real-IP;\nreal_ip_recursive on;"
          postgresql['enable'] = false
          gitlab_rails['trusted_proxies'] = ['caddy','nginx','apache2']
          gitlab_rails['redis_host'] = 'redis'
          gitlab_rails['redis_database'] = 8
          gitlab_rails['db_host'] = '${GITLAB_POSTGRES_HOST}'
          gitlab_rails['db_username'] = '${GITLAB_POSTGRES_USER}'
          gitlab_rails['db_password'] = '${GITLAB_POSTGRES_PASSWORD}'
          gitlab_rails['db_database'] = '${GITLAB_POSTGRES_DB}'
          gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
          gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_HOST_SSH_PORT}
      volumes:
        - ${DATA_PATH_HOST}/gitlab/config:/etc/gitlab
        - ${DATA_PATH_HOST}/gitlab/data:/var/opt/gitlab
        - ${GITLAB_HOST_LOG_PATH}:/var/log/gitlab
      ports:
        - "${GITLAB_HOST_HTTP_PORT}:80"
        - "${GITLAB_HOST_HTTPS_PORT}:443"
        - "${GITLAB_HOST_SSH_PORT}:22"
      networks:
        - backend
      depends_on:
        - redis
        - postgres
    gitlab-runner:
      image: gitlab/gitlab-runner:latest
      environment:
        - CI_SERVER_URL=${GITLAB_CI_SERVER_URL}
        - REGISTRATION_TOKEN=${GITLAB_RUNNER_REGISTRATION_TOKEN}
        - RUNNER_NAME=${COMPOSE_PROJECT_NAME}-runner
        - REGISTER_NON_INTERACTIVE=${GITLAB_REGISTER_NON_INTERACTIVE}
        - RUNNER_EXECUTOR=shell
      volumes:
        - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock:rw

### JupyterHub #########################################
    jupyterhub:
      build:
        context: ./jupyterhub
      depends_on:
        - postgres
        - jupyterhub-user
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock:rw
        - ${DATA_PATH_HOST}/jupyterhub/:/data
        - ${JUPYTERHUB_CUSTOM_CONFIG}:/jupyterhub_config.py
        - ${JUPYTERHUB_USER_DATA}:/user-data
        - ${JUPYTERHUB_USER_LIST}:/userlist
      networks:
        - backend
      ports:
        - "${JUPYTERHUB_PORT}:80"
      environment:
        - TERM=xterm
        - JUPYTERHUB_USER_DATA=${JUPYTERHUB_USER_DATA}
        - JUPYTERHUB_POSTGRES_DB=${JUPYTERHUB_POSTGRES_DB}
        - JUPYTERHUB_POSTGRES_USER=${JUPYTERHUB_POSTGRES_USER}
        - JUPYTERHUB_POSTGRES_HOST=${JUPYTERHUB_POSTGRES_HOST}
        - JUPYTERHUB_POSTGRES_PASSWORD=${JUPYTERHUB_POSTGRES_PASSWORD}
        - JUPYTERHUB_OAUTH_CALLBACK_URL=${JUPYTERHUB_OAUTH_CALLBACK_URL}
        - JUPYTERHUB_OAUTH_CLIENT_ID=${JUPYTERHUB_OAUTH_CLIENT_ID}
        - JUPYTERHUB_OAUTH_CLIENT_SECRET=${JUPYTERHUB_OAUTH_CLIENT_SECRET}
        - JUPYTERHUB_LOCAL_NOTEBOOK_IMAGE=${COMPOSE_PROJECT_NAME}_jupyterhub-user
        - JUPYTERHUB_ENABLE_NVIDIA=${JUPYTERHUB_ENABLE_NVIDIA}
    jupyterhub-user:
      build:
        context: ./jupyterhub
        dockerfile: Dockerfile.user
      command: ["sh", "-c", "echo \"build only\""]

volumes:
  mysql:
    driver: "local"
  postgres:
    driver: "local"
  memcached:
    driver: "local"
  redis:
    driver: "local"
  mariadb:
    driver: "local"
  phpmyadmin:
    driver: "local"
  caddy:
    driver: "local"
